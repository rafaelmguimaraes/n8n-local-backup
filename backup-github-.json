{
  "createdAt": "2025-06-06T17:16:14.343Z",
  "updatedAt": "2025-06-06T17:57:28.272Z",
  "id": "FCMED3Dmp6QpUl15",
  "name": "Backup Github",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {},
      "id": "4354cf41-614c-4374-93ac-9bf3a5068925",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        740,
        220
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 750.8363163824032,
        "width": 2086.845881354743,
        "color": 6
      },
      "id": "e237a090-127b-4a00-bb79-41df41b74614",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        300,
        600
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "abd1d768-68c9-46b5-983f-c51f6476a2d8",
      "name": "n8n",
      "type": "n8n-nodes-base.n8n",
      "position": [
        960,
        320
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "Y4qUVRzdRRRyPm2p",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "f58b1b30-a62b-47ca-a3f8-4b5626724cc8",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        2180,
        800
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "ee399010-244e-4f3e-a749-c4b6a033edf1",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1280,
        680
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "e4736ca7-2dec-4fd8-93ff-78b81ed34aaf",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        1080,
        700
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "ec275c16-40f7-460e-9a90-c1030ef55285",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        1080,
        960
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  try {\n    // Decode base64 content\n    const decodedContent = Buffer.from($input.all()[0].json.content, 'base64').toString().trim();\n    \n    // Check if decoded content is empty or just whitespace\n    if (!decodedContent || decodedContent.length === 0) {\n      console.log(\"Arquivo vazio ou apenas whitespace detectado\");\n      // Treat as new workflow since file is empty\n      const n8nWorkflow = $input.all()[1].json;\n      const orderedActual = orderJsonKeys(n8nWorkflow);\n      \n      $input.all()[0].json.github_status = \"new\";\n      $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n    } else {\n      // Try to parse as JSON\n      const origWorkflow = JSON.parse(decodedContent);\n      const n8nWorkflow = $input.all()[1].json;\n      \n      // Order JSON objects\n      const orderedOriginal = orderJsonKeys(origWorkflow);\n      const orderedActual = orderJsonKeys(n8nWorkflow);\n      \n      // Determine difference\n      if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n        $input.all()[0].json.github_status = \"same\";\n      } else {\n        $input.all()[0].json.github_status = \"different\";\n        $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n      }\n      $input.all()[0].json.content_decoded = orderedOriginal;\n    }\n  } catch (parseError) {\n    console.log(\"Erro ao fazer parse do JSON:\", parseError.message);\n    console.log(\"Conte√∫do decodificado:\", Buffer.from($input.all()[0].json.content, 'base64').toString());\n    \n    // Treat as new workflow if JSON parsing fails\n    const n8nWorkflow = $input.all()[1].json;\n    const orderedActual = orderJsonKeys(n8nWorkflow);\n    \n    $input.all()[0].json.github_status = \"new\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n    $input.all()[0].json.parse_error = parseError.message;\n  }\n  \n// No file returned / new workflow (data property)\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  try {\n    const origWorkflow = JSON.parse($input.all()[0].json.data);\n    const n8nWorkflow = $input.all()[1].json;\n    \n    // Order JSON objects\n    const orderedOriginal = orderJsonKeys(origWorkflow);\n    const orderedActual = orderJsonKeys(n8nWorkflow);\n    \n    // Determine difference\n    if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n      $input.all()[0].json.github_status = \"same\";\n    } else {\n      $input.all()[0].json.github_status = \"different\";\n      $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n    }\n    $input.all()[0].json.content_decoded = orderedOriginal;\n  } catch (parseError) {\n    console.log(\"Erro ao fazer parse do JSON (data):\", parseError.message);\n    \n    // Treat as new workflow if JSON parsing fails\n    const n8nWorkflow = $input.all()[1].json;\n    const orderedActual = orderJsonKeys(n8nWorkflow);\n    \n    $input.all()[0].json.github_status = \"new\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n    $input.all()[0].json.parse_error = parseError.message;\n  }\n  \n} else {\n  // Order JSON object (completely new workflow)\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"
      },
      "id": "7f654190-9b21-4112-bc3e-90bfbb51136d",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        1280,
        960
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "da0af506-727e-46b6-9bdf-8fc96d4b164b",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        1500,
        960
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "1fdf0779-2708-4705-a1a1-389279f1bbec",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1720,
        800
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "40df2680-ecd5-42ca-8a29-61b86845ed0f",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1720,
        960
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "7352e31b-9a99-4075-8a4e-3d7f50274631",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1720,
        1120
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "d6a8699c-94dc-4327-baf2-ce138ed4c082",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        1940,
        1120
      ],
      "webhookId": "e5e4ce8b-74a3-4b94-83ca-351edc280faf",
      "typeVersion": 1,
      "credentials": {
        "githubOAuth2Api": {
          "id": "hzgkgAJyMQNxf7yH",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "f5cc3a75-579a-43bf-828e-f23db7d7be68",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        1940,
        940
      ],
      "webhookId": "a57e71de-4960-4d25-a59f-1a9e2e96aff5",
      "typeVersion": 1,
      "credentials": {
        "githubOAuth2Api": {
          "id": "hzgkgAJyMQNxf7yH",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "3ea3eb0c-b39c-4a8f-9d35-e8b504ec8ba7",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1200,
        320
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 2
            }
          ]
        }
      },
      "id": "4cfc6a93-0304-4534-a0d7-e95a7b8a3616",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        740,
        420
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub.\n\nThe files are saved `ID.json` for the filename.\n\n### Setup\nOpen `Globals` node and update the values below üëá\n\n- **repo.owner:** your Github username\n- **repo.name:** the name of your repository\n- **repo.path:** the folder to use within the repository. If it doesn't exist it will be created.\n\n\nIf your username was `john-doe` and your repository was called `n8n-backups` and you wanted the workflows to go into a `workflows` folder you would set:\n\n- repo.owner - john-doe\n- repo.name - n8n-backups\n- repo.path - workflows/\n\n\nThe workflow calls itself using a subworkflow, to help reduce memory usage.",
        "height": 601,
        "width": 371,
        "color": 4
      },
      "id": "445ebaf1-5913-4c06-a22d-fb982dae2b6e",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        300,
        -40
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 435,
        "width": 886,
        "color": 7
      },
      "id": "124fa5b9-e4b4-44ae-b722-a1289ee8c4d4",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        700,
        140
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $('Globals').item.json.repo.owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Globals').item.json.repo.name }}",
          "mode": "name"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{ $json.id }}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "2ebccba1-1431-4dae-8dc3-512b6326a159",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        880,
        700
      ],
      "webhookId": "743111c3-2c21-4658-8097-a9fe966f43d2",
      "typeVersion": 1,
      "alwaysOutputData": true,
      "credentials": {
        "githubOAuth2Api": {
          "id": "hzgkgAJyMQNxf7yH",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
              "name": "repo.owner",
              "type": "string",
              "value": "rafaelmguimaraes"
            },
            {
              "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
              "name": "repo.name",
              "type": "string",
              "value": "n8n-local-backup"
            },
            {
              "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
              "name": "repo.path",
              "type": "string",
              "value": "workflows/"
            }
          ]
        },
        "options": {}
      },
      "id": "d6362380-cb13-4d04-8777-15270a5923e2",
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "position": [
        660,
        860
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "## Edit this node üëá",
        "height": 80,
        "width": 150,
        "color": 4
      },
      "id": "560ecfac-fc37-4c66-8b69-3d5bfec30132",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        620,
        760
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "### üí° **Want to learn advanced n8n skills and earn money building workflows?**\n‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚ÄéCheck out [Scrapes Academy](https://www.skool.com/scrapes/about?ref=21f10ad99f4d46ba9b8aaea8c9f58c34)",
        "width": 640,
        "color": 4
      },
      "id": "90b0b47c-e50a-44bd-a11f-3e692126b757",
      "name": "Sticky Note16",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        700,
        -40
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "id": "edc753f2-529c-48f3-a0eb-3f341b3cd1c7",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        380,
        940
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "S9gIi24yEG3zCMWy",
          "mode": "list",
          "cachedResultName": "Sub Salva no Github"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1420,
        360
      ],
      "id": "f2f74ce2-e0dc-479f-8b0d-b315426a84c8",
      "name": "Execute Workflow"
    }
  ],
  "connections": {
    "n8n": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        []
      ]
    },
    "Execute Workflow": {
      "main": [
        []
      ]
    },
    "Return": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "a0e26ae2-328a-476d-b616-5af891d0b282",
  "triggerCount": 1,
  "tags": []
}